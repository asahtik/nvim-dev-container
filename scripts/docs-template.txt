*devcontainer.txt* Description

INTRODUCTION                                     *devcontainer-main*

Description

CONTENTS                                         *devcontainer-contents*

  1.  Overview                                   |devcontainer-overview|
  2.  Requirements                               |devcontainer-requirements|
  3.  Installation                               |devcontainer-installation|
  4.  Usage                                      |devcontainer-usage|
  5.  Commands                                   |devcontainer-commands|
  6.  Functions                                  |devcontainer-functions|
  7.  Events                                     |devcontainer-autocmd-events|
  8.  Issues                                     |devcontainer-issues|
  9.  Contributing                               |devcontainer-contributing|
  10. Version                                    |devcontainer-version|
  11. License                                    |devcontainer-license|

OVERVIEW                                         *devcontainer-overview*

REQUIREMENTS                                     *devcontainer-requirements*

INSTALLATION                                     *devcontainer-installation*

1. lazy.nvim <https://github.com/folke/lazy.nvim>

Add the following to your lazy setup: >

  'https://codeberg.org/esensar/nvim-dev-container'
<

2. Plug <https://github.com/junegunn/vim-plug>

Add the following to your vimrc, or something sourced therein: >

  Plug 'https://codeberg.org/esensar/nvim-dev-container'
<
Then install via `:PlugInstall`

3. Manual

Clone this repository and copy the files in plugin/, lua/, and doc/
to their respective directories in your vimfiles, or copy the text from
the github repository into new files in those directories. Make sure to
run `:helptags`.

USAGE                                            *devcontainer-usage*

To use the plugin with defaults just call the `setup` function: >

  require("devcontainer").setup{}
<

It is possible to override some of the functionality of the plugin with options passed into `setup`. Everything passed to `setup` is optional. Following block represents default values: >

  require("devcontainer").setup {
    config_search_start = function()
      -- By default this function uses vim.loop.cwd()
      -- This is used to find a starting point for .devcontainer.json file search
      -- Since by default, it is searched for recursively
      -- That behavior can also be disabled
    end,
    workspace_folder_provider = function()
      -- By default this function uses first workspace folder for integrated lsp if available and vim.loop.cwd() as a fallback
      -- This is used to replace `${localWorkspaceFolder}` in devcontainer.json
      -- Also used for creating default .devcontainer.json file
    end,
    terminal_handler = function(command)
      -- By default this function creates a terminal in a new tab using :terminal command
      -- It also removes statusline when that tab is active, to prevent double statusline
      -- It can be overridden to provide custom terminal handling
    end,
    nvim_dockerfile_template = function(base_image)
      -- Takes base_image and returns string, which should be used as a Dockerfile
      -- This is used when adding neovim to existing images
      -- Check out default implementation in lua/devcontainer/config.lua
      -- It installs neovim version based on current version
    end,
    devcontainer_json_template = function()
      -- Returns table - list of lines to set when creating new devcontainer.json files
      -- As a template
      -- Used only when using functions from commands module or created commands
    end,
    -- Can be set to false to prevent generating default commands
    -- Default commands are listed below
    generate_commands = true,
    -- By default no autocommands are generated
    -- This option can be used to configure automatic starting and cleaning of containers
    autocommands = {
      -- can be set to true to automatically start containers when devcontainer.json is available
      init = false,
      -- can be set to true to automatically remove any started containers and any built images when exiting vim
      clean = false,
      -- can be set to true to automatically restart containers when devcontainer.json file is updated
      update = false,
    },
    -- can be changed to increase or decrease logging from library
    log_level = "info",
    -- can be set to true to disable recursive search
    -- in that case only .devcontainer.json and .devcontainer/devcontainer.json files will be checked relative
    -- to the directory provided by config_search_start
    disable_recursive_config_search = false,
    -- By default all mounts are added (config, data and state)
    -- This can be changed to disable mounts or change their options
    -- This can be useful to mount local configuration
    -- And any other mounts when attaching to containers with this plugin
    attach_mounts = {
      neovim_config = {
        -- enables mounting local config to /root/.config/nvim in container
        enabled = false,
        -- makes mount readonly in container
        options = { "readonly" }
      },
      neovim_data = {
        -- enables mounting local data to /root/.local/share/nvim in container
        enabled = false,
        -- no options by default
        options = {}
      },
      -- Only useful if using neovim 0.8.0+
      neovim_state = {
        -- enables mounting local state to /root/.local/state/nvim in container
        enabled = false,
        -- no options by default
        options = {}
      },
    },
    -- This takes a list of mounts (strings or tables) that should always be added to every run container
    -- This is passed directly as --mount option to docker command
    -- Or multiple --mount options if there are multiple vaues
    always_mount = {}
    -- This takes a string (usually either "podman" or "docker") representing container runtime - "devcontainer-cli" is also partially supported
    -- That is the command that will be invoked for container operations
    -- If it is nil, plugin will use whatever is available (trying "podman" first)
    container_runtime = nil,
    -- Similar to container runtime, but will be used if main runtime does not support an action - useful for "devcontainer-cli"
    backup_runtime = nil,
    -- This takes a string (usually either "podman-compose" or "docker-compose") representing compose command - "devcontainer-cli" is also partially supported
    -- That is the command that will be invoked for compose operations
    -- If it is nil, plugin will use whatever is available (trying "podman-compose" first)
    compose_command = nil,
    -- Similar to compose command, but will be used if main command does not support an action - useful for "devcontainer-cli"
    backup_compose_command = nil,
  }
<

Check out [wiki](https://codeberg.org/esensar/nvim-dev-container/wiki) for tips.

COMMANDS                                         *devcontainer-commands*

If not disabled by using {generate_commands = false} in setup, this plugin provides the following commands:

*:DevcontainerStart* - start whatever is defined in devcontainer.json
*:DevcontainerAttach* - attach to whatever is defined in devcontainer.json
*:DevcontainerExec* - execute a single command on container defined in devcontainer.json
*:DevcontainerStop* - stop whatever was started based on devcontainer.json
*:DevcontainerStopAll* - stop everything started with this plugin (in current session)
*:DevcontainerRemoveAll* - remove everything started with this plugin (in current session)
*:DevcontainerLogs* - open plugin log file
*:DevcontainerEditNearestConfig* - opens nearest devcontainer.json file if it exists, or creates a new one if it does not

FUNCTIONS                                        *devcontainer-functions*

This plugin provides multiple modules related to devcontainer functionality,
but not all of them are needed for use tasks. Many of the functionalities are
exposed to enable custom functionality.

---INSERT HERE---

EVENTS                                        *devcontainer-autocmd-events*

This plugin also provides autocmd events:

*DevcontainerBuildProgress*
  Emitted when build status changes. Useful for statusline updates.
  See |devcontainer.status.find_build|.

*DevcontainerImageBuilt*
  Emitted when an image is built with this plugin. Passes a table in `data`
  with `image_id`.

*DevcontainerImageRemoved*
  Emitted when an image is removed with this plugin. Passes a table in `data`
  with `image_id`.

*DevcontainerContainerStarted*
  Emitted when a container is started with this plugin. Passes a table in `data`
  with `container_id`.

*DevcontainerContainerStopped*
  Emitted when a container is stopped with this plugin. Passes a table in `data`
  with `container_id`.

*DevcontainerContainerRemoved*
  Emitted when a container is removed with this plugin. Passes a table in `data`
  with `container_id`.

Example:
  autocmd User DevcontainerBuildProgress redrawstatus


ISSUES                                           *devcontainer-issues*

If you experience issues using plugin, please report them at
<https://codeberg.org/esensar/nvim-dev-container/issues>.

CONTRIBUTING                                     *devcontainer-contributing*

Feel free to look at already reported issues at
<https://codeberg.org/esensar/nvim-dev-container/issues>.
If available, check out CONTRIBUTING.md in the repository.
Otherwise, feel free to create a new issue or pull request.

VERSION                                          *devcontainer-version*

Version 0.3.0-dev

LICENSE                                          *devcontainer-license*

MIT License

Copyright (c) 2022 Ensar Sarajčić

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=2:ft=help:norl:
